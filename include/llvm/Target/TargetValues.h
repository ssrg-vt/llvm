//===----- llvm/Target/TargetValues.h - Value Properties ----*- C++ -----*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file provides an API for detecting properties of architecture-specific
// values & for generating a series of simple metadata instructions for
// reconstituting a value.  This is used by the stack transformation runtime to
// set up architecture-specific live values.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_TARGET_TARGETVAL_H
#define LLVM_TARGET_TARGETVAL_H

#include "llvm/CodeGen/StackTransformTypes.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/IR/Instructions.h"

namespace llvm {

//===----------------------------------------------------------------------===//
// Superclass for ISA-specific values
//

class TargetValues {
public:
  TargetValues(const TargetValues &) = delete;
  void operator=(const TargetValues &) = delete;
  virtual ~TargetValues() {};

  /// Return a machine-specific value generated by a machine instruction.
  virtual MachineLiveValPtr getMachineValue(const MachineInstr *MI) const = 0;

  /// Add any required architecture-specific live values, e.g., the TOC pointer
  /// on PowerPC.
  virtual void addRequiredArchLiveValues(MachineFunction *MF,
                                         const MachineInstr *MIStackMap,
                                         const CallInst *IRStackMap) const
  { return; }

protected:
  TargetValues() {}
};

} // End llvm namespace

#endif

